// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc5933.Caroline.subsystems;

import org.usfirst.frc5933.Caroline.RobotMap;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.SpeedController;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class GearCollectionSystem extends Subsystem {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController frontFlapperMotor = RobotMap.gearCollectionSystemFrontFlapperMotor;
    private final SpeedController backFlapperMotor = RobotMap.gearCollectionSystemBackFlapperMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// Put methods for controlling this subsystem
	// here. Call these from Commands.
	private static int flapperCase = 0;
	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	public void robotInit() {
	}

	public void teleopInit() {
	}

	public void autonomousInit() {
	}

	public void openFrontFlapper() {
		frontFlapperMotor.set(1);
		SmartDashboard.putString("Front Flapper: ", "open");
	}

	public void closeFrontFlapper() {
		frontFlapperMotor.set(-1);
		SmartDashboard.putString("Front Flapper: ", "closed");
	}

	public void openBackFlapper() {
		backFlapperMotor.set(1);
		SmartDashboard.putString("Back Flapper: ", "open");
	}

	public void closeBackFlapper() {
		backFlapperMotor.set(-1);
		SmartDashboard.putString("Back Flapper: ", "closed");
	}

	public void stop() {
		flapperCase = 0;
		backFlapperMotor.stopMotor();
		frontFlapperMotor.stopMotor();
		SmartDashboard.putNumber("Flapper case: ", flapperCase);
	}

	public void teleopPeriodic() {
		//flapTheHOut();
	}

	public void autonomousPeriodic() {

	}

	public void flapTheHOut(){
		switch (flapperCase){
		case 1:	//front out, back back (stay, technically).
			frontFlapperMotor.set(1);
			backFlapperMotor.set(-1);
			break;
		case 2:	//front out (stay), back out
			frontFlapperMotor.set(1);
			backFlapperMotor.set(1);
			break;
		case 3:	//front out (stay), back back
			frontFlapperMotor.set(1);
			backFlapperMotor.set(-1);
			break;
		case 4:	//front back, back back (stay)
			frontFlapperMotor.set(-1);
			backFlapperMotor.set(-1);
			break;
		default:
			flapperCase = 0;
			frontFlapperMotor.set(-1);
			backFlapperMotor.set(-1);
			break;
		}
	}
	
	public void flapTheHellOut(){
		flapperCase ++;
	}
}
