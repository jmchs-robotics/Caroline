// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc5933.Caroline.subsystems;

import org.usfirst.frc5933.Caroline.RobotMap;
import com.ctre.CANTalon;

import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class HopperSystem extends Subsystem {

	private boolean running_ = false;
	
	public final static double kAgitatorIncrement = 0.05;
	public final static double kAgitatorMin = 0;
	public final static double kAgitatorMax = 1;
	
	private double agitatorSpeed_ = 0; 

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon agitiatorMotor = RobotMap.hopperSystemAgitiatorMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	public void robotInit() {

	}

	public void teleopInit() {

	}

	public void autonomousInit() {

	}

	public void teleopPeriodic() {
		if (running_) {
			agitiatorMotor.set(agitatorSpeed_);
		} else {
			agitiatorMotor.set(0);
		}
	}

	public void autonomousPeriodic() {
		if (running_) {
			agitiatorMotor.set(agitatorSpeed_);
		} else {
			agitiatorMotor.set(0);
		}
	}

	public void toggle() {
		running_ = !running_;
	}

	public boolean isRunnning() {
		return running_;
	}
	
	public void incrementAgitator(){
		agitatorSpeed_ += kAgitatorIncrement;
		if(agitatorSpeed_ > kAgitatorMax){
			agitatorSpeed_ = kAgitatorMax;
		}
	}
	
	public void decrementAgitator(){
		agitatorSpeed_ -= kAgitatorIncrement;	
		if(agitatorSpeed_ < kAgitatorMin){
			agitatorSpeed_ = kAgitatorMin;
		}
	}

}
