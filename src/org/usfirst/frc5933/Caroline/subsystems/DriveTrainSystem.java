// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc5933.Caroline.subsystems;

import org.usfirst.frc5933.Caroline.Robot;
import org.usfirst.frc5933.Caroline.RobotMap;
import org.usfirst.frc5933.Caroline.commands.DefaultTeleopCommand;

import com.ctre.CANTalon;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.RobotDrive;

import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class DriveTrainSystem extends Subsystem {
    public final static float kNominalVoltage = 0;
    public final static float kPeakVoltage = 12;

    private CANTalon leftSlave1Motor;
    private CANTalon leftSlave2Motor;

    private CANTalon rightSlave1Motor;
    private CANTalon rightSlave2Motor;

    public DriveTrainSystem() {
        super();
        if (!Robot.is_sonny) {
            leftSlave1Motor = new CANTalon(13);
            leftSlave2Motor = new CANTalon(15);
            rightSlave1Motor = new CANTalon(14);
            rightSlave2Motor = new CANTalon(16);
        }
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon leftMasterMotor = RobotMap.driveTrainSystemLeftMasterMotor;
    private final CANTalon rightMasterMotor = RobotMap.driveTrainSystemRightMasterMotor;
    private final RobotDrive robotDrive = RobotMap.driveTrainSystemRobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DefaultTeleopCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    public void robotInit() {
        configVoltages(kNominalVoltage, kPeakVoltage);
        configFollower();
    }

    public void teleopInit() {
        enableBrakeMode(false);
    }

    public void autonomousInit() {
        enableBrakeMode(true);
    }

    public void set(double left, double right) {
        leftMasterMotor.set(left);
        rightMasterMotor.set(right);
    }

    public void stop() {
        robotDrive.stopMotor();
    }

    public void arcadeDrive(GenericHID joystick) {
        robotDrive.arcadeDrive(joystick);
    }

    public void arcadeDrive(double moveValue, double rotateValue) {
        robotDrive.arcadeDrive(moveValue, rotateValue);
    }

    public void tankDrive(double leftValue, double rightValue) {
        robotDrive.tankDrive(leftValue, rightValue);
    }

    private void enableBrakeMode(boolean enable) {
        leftMasterMotor.enableBrakeMode(enable);
        rightMasterMotor.enableBrakeMode(enable);

        if (!Robot.is_sonny) {
            leftSlave1Motor.enableBrakeMode(enable);
            leftSlave2Motor.enableBrakeMode(enable);
            rightSlave1Motor.enableBrakeMode(enable);
            rightSlave2Motor.enableBrakeMode(enable);
        }
    }

    private void configVoltages(float nominal, double peak) {
        leftMasterMotor.configNominalOutputVoltage(nominal, -nominal);
        leftMasterMotor.configPeakOutputVoltage(peak, -peak);
        rightMasterMotor.configNominalOutputVoltage(nominal, -nominal);
        rightMasterMotor.configPeakOutputVoltage(peak, -peak);

        if (!Robot.is_sonny) {
            leftSlave1Motor.configNominalOutputVoltage(nominal, -nominal);
            leftSlave1Motor.configPeakOutputVoltage(peak, -peak);
            leftSlave2Motor.configNominalOutputVoltage(nominal, -nominal);
            leftSlave2Motor.configPeakOutputVoltage(peak, -peak);
            rightSlave1Motor.configNominalOutputVoltage(nominal, -nominal);
            rightSlave1Motor.configPeakOutputVoltage(peak, -peak);
            rightSlave2Motor.configNominalOutputVoltage(nominal, -nominal);
            rightSlave2Motor.configPeakOutputVoltage(peak, -peak);
        }
    }

    private void configFollower() {
        if (!Robot.is_sonny) {
            leftSlave1Motor.changeControlMode(TalonControlMode.Follower);
            leftSlave1Motor.set(leftMasterMotor.getDeviceID()); // tells the
                                                                // follower
                                                                // which master
                                                                // to follow.
            leftSlave2Motor.changeControlMode(TalonControlMode.Follower);
            leftSlave2Motor.set(leftMasterMotor.getDeviceID()); // tells the
                                                                // follower
                                                                // which master
                                                                // to follow.
            rightSlave1Motor.changeControlMode(TalonControlMode.Follower);
            rightSlave1Motor.set(rightMasterMotor.getDeviceID()); // tells the
                                                                  // follower
                                                                  // which
                                                                  // master to
                                                                  // follow.
            rightSlave2Motor.changeControlMode(TalonControlMode.Follower);
            rightSlave2Motor.set(rightMasterMotor.getDeviceID()); // tells the
                                                                  // follower
                                                                  // which
                                                                  // master to
                                                                  // follow.
        }
    }

    public void teleopPeriodic() {
        
    }

    public void autonomousPeriodic() {
        
    }
}
