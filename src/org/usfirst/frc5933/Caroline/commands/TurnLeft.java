// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc5933.Caroline.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc5933.Caroline.Robot;
import org.usfirst.frc5933.Caroline.subsystems.DriveTrainSystem.Direction;

/**
 *
 */
public class TurnLeft extends Command {
	static double timeout_;
	static boolean fancy = false;
	static boolean aroundCenter_;
	static double degrees_;
	static Direction dir_;
	static int precision_;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public TurnLeft() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.driveTrainSystem);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

		timeout_ = 5;
	}

	public TurnLeft(boolean aroundCenter, double degrees, int precision){
		fancy = true;

		aroundCenter_ = aroundCenter;
		degrees_ = degrees;
		dir_ = Direction.Left;
		precision_ = precision;

		requires(Robot.driveTrainSystem);
	}

	public TurnLeft(int timeout){
		timeout_ = timeout;

		requires(Robot.driveTrainSystem);
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		if(fancy){
			Robot.driveTrainSystem.setTurningMotionMagic(dir_, degrees_, aroundCenter_);
			SmartDashboard.putString("set: ", dir_ + " " + degrees_ + " " + aroundCenter_);
		}else{
			setTimeout(timeout_);
		}
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		if(fancy){
			SmartDashboard.putBoolean("mot magic: ", Robot.driveTrainSystem.goTurningMotionMagic(precision_));
		}else{
			Robot.driveTrainSystem.tankDrive(0.2 * Robot.driveTrainSystem.getLeftCoefficient(), -0.2);
		}
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		if(fancy){
			return Robot.driveTrainSystem.goTurningMotionMagic(precision_);
		}else{
			return isTimedOut();
		}
	}

	// Called once after isFinished returns true
	protected void end() {
		Robot.driveTrainSystem.stop();
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		end();
	}
}
