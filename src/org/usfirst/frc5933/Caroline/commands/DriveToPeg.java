// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc5933.Caroline.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc5933.Caroline.Robot;
import org.usfirst.frc5933.Caroline.SocketVision;

/**
 *
 */
public class DriveToPeg extends Command {
	private static boolean finished = false;
	private static final double kAcceptableDist = 10; //a good distance for the robot to stop under, so the peg will always be grabbed. EXPERIMENTALLY DETERMINED
	private static final double kPictureWidth = 1000; //used in some math to make sure the change of speed doesn't exceed 0.25
	private static final double kDefaultDriveSpeed = 0.5;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public DriveToPeg() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrainSystem);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		//TODO: something useful, like connecting to visionPeg_? then using that data merged with a tankDrive to get there?
		if (Robot.visionPeg_ != null) {		//just like in robot init, make sure you connect. No harm in doing it twice.
			if (!Robot.visionPeg_.is_connected()) {
				if (!Robot.visionPeg_.connect()) {
					if (Robot.show_debug_vision) {
						System.err.println("Failed to connect to the Helmsman and I really need my mayonnaise");
					}
					finished = true;	//get out of this command. Hopefully the next one will work...

				} else {
					if (Robot.show_debug_vision) {
						System.out.println("Connected. No mayo for me.");
					}
					finished = false;
				}
			}
		}
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		double dist = Robot.visionPeg_.get_distance();
		if(dist < kAcceptableDist)
			finished = true;	//the gear is delivered

		if(!finished){
			double x_dist = Robot.visionPeg_.get_degrees_x();
			double modifier = Math.abs(x_dist / kPictureWidth);	//I want this so maximum error will only change the speed by .25
			if (modifier > 0.25)
				modifier = 0.25;								//safety catch for above reason

			String dir = Robot.visionPeg_.get_direction();		//cause modifier is always positive

			switch(dir){
			case SocketVision.NADA:
				Robot.driveTrainSystem.tankDrive(kDefaultDriveSpeed, kDefaultDriveSpeed);		//0.5 may be too fast, change var in top.
				break;
			case SocketVision.LEFT:
				Robot.driveTrainSystem.tankDrive(kDefaultDriveSpeed - modifier, kDefaultDriveSpeed);	//always slow down the side you want to turn to. Kinda like a boat's rudder.
				break;
			case SocketVision.RIGHT:
				Robot.driveTrainSystem.tankDrive(kDefaultDriveSpeed, kDefaultDriveSpeed - modifier);
			default:
				Robot.driveTrainSystem.tankDrive(kDefaultDriveSpeed / 2, kDefaultDriveSpeed / 2); //go slower if something isn't working

				if(Robot.show_debug_vision){
					System.err.println("Socket failed");
				}

				break;
			}
		}
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return finished;
	}

	// Called once after isFinished returns true
	protected void end() {
		Robot.driveTrainSystem.stop();
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		end();
	}
}
