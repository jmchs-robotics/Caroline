// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc5933.Caroline.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc5933.Caroline.Robot;
import org.usfirst.frc5933.Caroline.SocketVision;

/**
 *
 */
public class AlignToBoiler extends Command {
	private static boolean finished = false;
	static int finishedCounter = 0;
	// because only the center 1/3 is used on the pic
	private static final double kDegreesToVBus = 42;

	private static final double kMaxShudder = 0.75;
	private static final double kMinimumShudder = 0.3;
	private static final int kOscillationPeriods = 10;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public AlignToBoiler() {
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrainSystem);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		finished = false;
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		String dir = Robot.get_boiler_direction();
		double x_dist = Math.abs(Robot.get_boiler_degress_x());

		// Try to keep output under 0.5, even that may be too high.
		double vBusProportion = x_dist / kDegreesToVBus;

		// forces number between max shudder (0.5) and min shudder (0.2)
		if (vBusProportion > kMaxShudder) {
			vBusProportion = kMaxShudder;
		} else if (vBusProportion < kMinimumShudder) {
			vBusProportion = kMinimumShudder;
		}

		if (dir == SocketVision.NADA) {
			finishedCounter ++;
			if(finishedCounter >= kOscillationPeriods)
				finished = true;
		}
		
		if (!finished) {
			switch (dir) {
			case SocketVision.LEFT:
				Robot.driveTrainSystem.set(/*-vBusProportion * Robot.driveTrainSystem.getLeftCoefficient()*/ 0, vBusProportion);
				break;
			case SocketVision.RIGHT:
				Robot.driveTrainSystem.set(/*vBusProportion * Robot.driveTrainSystem.getLeftCoefficient()*/0, -vBusProportion);
				break;
			default:
				finished = true;
				break;
			}
		}
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return finished;
	}

	// Called once after isFinished returns true
	protected void end() {
		Robot.driveTrainSystem.stop();
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		end();
	}
}
