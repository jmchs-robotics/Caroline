// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc5933.Caroline.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc5933.Caroline.Robot;
import org.usfirst.frc5933.Caroline.SocketVision;

/**
 *
 */
public class AlignToBoiler extends Command {
	private static boolean finished = false;
	private static final double kDegreesToVBus = 42; // because only the center
														// 1/3 is used on the
														// pic
	private static final double kMaxShudder = 0.5;
	private static final double kMinimumShudder = 0.1;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public AlignToBoiler() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.driveTrainSystem);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		if (Robot.visionBoiler_ != null) {
			if (!Robot.visionBoiler_.is_connected()) {
				if (!Robot.visionBoiler_.connect()) {
					if (Robot.show_debug_vision) {
						System.err.println("Failed to connect to the Helmsman and I really need my mayonnaise");
					}
					finished = true;
				} else {
					if (Robot.show_debug_vision) {
						System.out.println("Connected. No mayo for me.");
					}
					finished = false;
				}
			}
		}
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		String dir = Robot.visionBoiler_.get_direction();
		double x_dist = Math.abs(Robot.visionBoiler_.get_degrees_x());
		double vBusProportion = x_dist / kDegreesToVBus; // Try to keep output
															// under 0.5, even
															// that may be too
															// high.

		if (vBusProportion > kMaxShudder) { // forces number between max shudder
											// (0.5)
			vBusProportion = kMaxShudder;
		} else if (vBusProportion < kMinimumShudder) { // and min shudder (0.2)
			vBusProportion = kMinimumShudder;
		}

		if (dir == SocketVision.NADA) {
			finished = true;
		}
		if (!finished) {
			switch (dir) {
			case SocketVision.LEFT:
				Robot.driveTrainSystem.set(-vBusProportion, vBusProportion);
				break;
			case SocketVision.RIGHT:
				Robot.driveTrainSystem.set(vBusProportion, -vBusProportion);
				break;
			default:
				finished = true;
				if (Robot.show_debug_vision) {
					System.out.println("Something went wrong aligning to boiler.");
				}
				break;
			}
		}
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return finished;
	}

	// Called once after isFinished returns true
	protected void end() {
		Robot.driveTrainSystem.stop();
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		end();
	}
}
